name: CI/CD Pipeline - Azure

on:
  push:
    branches:
      - master
      - dev
    tags:
      - 'v*'  

env:
  REGISTRY: ghcr.io  
  IMAGE_OWNER: ${{ github.repository_owner }}
  IMAGE_REPO: ${{ github.event.repository.name }}

jobs:
  # ============================================================
  # 0. VALIDATE: Validar pertenencia de commits/tags
  # ============================================================
  validate:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.ctx.outputs.should_deploy }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - id: ctx
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            git branch -r --contains "$GITHUB_SHA" | grep -q "origin/master" || exit 1
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  # ============================================================
  # 1. BUILD: Compilar el proyecto Maven
  # ============================================================
  build:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v4

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Instalar dependencias
        run: mvn dependency:resolve

      - name: Compilar proyecto
        run: mvn clean compile

  # ============================================================
  # 2. TEST: Ejecutar tests unitarios e integraciÃ³n
  # ============================================================
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v4

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Ejecutar tests
        run: mvn test

      - name: Generar reporte de cobertura (JaCoCo)
        run: mvn jacoco:report

      - name: Subir reportes de tests
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            target/surefire-reports/
            target/site/jacoco/

  # ============================================================
  # 3. SONARCLOUD ANALYSIS: AnÃ¡lisis de calidad y seguridad
  # ============================================================
  sonar-analysis:
    needs: [validate, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Ejecutar tests con cobertura
        run: mvn test jacoco:report

      - name: SonarCloud Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.organization=${{ secrets.SONAR_ORG }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ env.SONAR_TOKEN }} \
            -Dsonar.java.coveragePlugin=jacoco \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  # ============================================================
  # 4. BUILD DOCKER IMAGE & PUSH
  # Solo en master (prod) y tags (prod versionado) - NO en dev
  # ============================================================
  publish:
    needs: [validate, sonar-analysis]
    runs-on: ubuntu-latest
    if: needs.validate.outputs.should_deploy == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}
      
      - name: Build & push to GHCR
        run: |
          REPO_LOWER=$(echo "${IMAGE_REPO}" | tr '[:upper:]' '[:lower:]')
          IMAGE_BASE=ghcr.io/${IMAGE_OWNER}/$REPO_LOWER
          SHA_SHORT=${GITHUB_SHA::8}
          
          # Determinar tags segÃºn el contexto
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # TAG â†’ version especÃ­fica + latest
            TAG_NAME=${GITHUB_REF#refs/tags/}
            echo "ðŸ“¦ Building PROD TAG: $TAG_NAME, $SHA_SHORT, latest"
            docker build -t "$IMAGE_BASE:$TAG_NAME" -t "$IMAGE_BASE:$SHA_SHORT" -t "$IMAGE_BASE:latest" .
            docker push "$IMAGE_BASE:$TAG_NAME"
            docker push "$IMAGE_BASE:$SHA_SHORT"
            docker push "$IMAGE_BASE:latest"
          elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            # MASTER â†’ sha + latest
            echo "ðŸ“¦ Building PROD MASTER: $SHA_SHORT, latest"
            docker build -t "$IMAGE_BASE:$SHA_SHORT" -t "$IMAGE_BASE:latest" .
            docker push "$IMAGE_BASE:$SHA_SHORT"
            docker push "$IMAGE_BASE:latest"
          fi

  
  # ============================================================
  # 5. DEPLOY CON TERRAFORM A AZURE (PRODUCCIÃ“N)
  # Solo en master (prod) y tags (prod versionado) - NO en dev
  # ============================================================
  terraform-deploy:
    needs: [validate, publish]
    runs-on: ubuntu-latest
    if: needs.validate.outputs.should_deploy == 'true'
    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v4

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Autenticar en Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: RG exist
        run: |
          az group create -n devops-service-rg -l eastus \
            --tags environment=production managed-by=terraform
      
      - name: Setup Terraform Backend Storage
        run: |
          # Crear Storage Account para el estado de Terraform
          az storage account create \
            --name tfstatedevops97 \
            --resource-group devops-service-rg \
            --location eastus \
            --sku Standard_LRS \
            --encryption-services blob || echo "Storage account already exists"
          
          # Obtener la clave de acceso
          ACCOUNT_KEY=$(az storage account keys list \
            --resource-group devops-service-rg \
            --account-name tfstatedevops97 \
            --query '[0].value' -o tsv)
          
          # Crear contenedor para el estado
          az storage container create \
            --name tfstate \
            --account-name tfstatedevops97 \
            --account-key $ACCOUNT_KEY || echo "Container already exists"

      - name: Get image ref
        id: img
        run: |
          OWNER_LOWER=$(echo "${{ env.IMAGE_OWNER }}" | tr '[:upper:]' '[:lower:]')
          REPO_LOWER=$(echo "${{ env.IMAGE_REPO }}" | tr '[:upper:]' '[:lower:]')
          
          # Seleccionar imagen segÃºn el contexto
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # TAG â†’ usar el tag especÃ­fico
            TAG_NAME=${GITHUB_REF#refs/tags/}
            IMAGE_REF="ghcr.io/${OWNER_LOWER}/${REPO_LOWER}:${TAG_NAME}"
            echo "ðŸš€ Deploying PROD with TAG: $TAG_NAME"
          elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            # MASTER â†’ usar latest
            IMAGE_REF="ghcr.io/${OWNER_LOWER}/${REPO_LOWER}:latest"
            echo "ðŸš€ Deploying PROD with MASTER: latest"
          fi
          
          echo "ref=$IMAGE_REF" >> $GITHUB_OUTPUT

      - name: Setup Terraform Auth
        run: |
          # Extraer credenciales del Service Principal para Terraform backend
          ARM_CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientId)
          ARM_CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientSecret)
          ARM_SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .subscriptionId)
          ARM_TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .tenantId)
          
          echo "ARM_CLIENT_ID=$ARM_CLIENT_ID" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$ARM_TENANT_ID" >> $GITHUB_ENV

      - name: Terraform Init
        env:
          ARM_CLIENT_ID: ${{ env.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ env.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ env.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ env.ARM_TENANT_ID }}
        run: terraform -chdir=terraform init -input=false

      - name: Terraform Validate
        run: terraform -chdir=terraform validate -no-color

      - name: Terraform Apply
        env:
          ARM_CLIENT_ID: ${{ env.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ env.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ env.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ env.ARM_TENANT_ID }}
        run: |
          terraform -chdir=terraform apply -auto-approve -input=false \
            -var="location=eastus" \
            -var="docker_image=${{ steps.img.outputs.ref }}" \
            -var="ghcr_username=cfidrobo97" \
            -var="ghcr_token=${{ secrets.GHCR_PAT }}" \
            -var="container_port=8080"

      - name: Show URL
        env:
          ARM_CLIENT_ID: ${{ env.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ env.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ env.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ env.ARM_TENANT_ID }}
        run: terraform -chdir=terraform output app_url

