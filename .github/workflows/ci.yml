name: CI/CD Pipeline - Azure

on:
  push:
    branches:
      - main  
      - dev    
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io 
  IMAGE_OWNER: ${{ github.repository_owner }}
  IMAGE_REPO: ${{ github.event.repository.name }}

jobs:
  # ============================================================
  # 1. BUILD: Compilar el proyecto Maven
  # ============================================================
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Instalar dependencias
        run: mvn dependency:resolve

      - name: Compilar proyecto
        run: mvn clean compile

  # ============================================================
  # 2. TEST: Ejecutar tests unitarios e integración
  # ============================================================
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Ejecutar tests
        run: mvn test

      - name: Generar reporte de cobertura (JaCoCo)
        run: mvn jacoco:report

      - name: Subir reportes de tests
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            target/surefire-reports/
            target/site/jacoco/

  # ============================================================
  # 3. STATIC ANALYSIS: Análisis estático de código
  # ============================================================
  static-analysis:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Ejecutar SpotBugs (análisis estático)
        run: mvn spotbugs:check

      - name: Subir reportes de análisis
        uses: actions/upload-artifact@v4
        with:
          name: analysis-reports
          path: target/spotbugsXml.xml

  # ============================================================
  # 4. BUILD DOCKER IMAGE & PUSH
  # ============================================================
  publish:
    needs: static-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login a GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determinar tag de imagen
        id: tag
        run: echo "sha=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Construir y subir imagen Docker
        run: |
          REPO_LOWER=$(echo "${IMAGE_REPO}" | tr '[:upper:]' '[:lower:]')
          IMAGE=${{ env.REGISTRY }}/${IMAGE_OWNER}/${REPO_LOWER}
          docker build -t $IMAGE:${{ steps.tag.outputs.sha }} -t $IMAGE:latest .
          docker push $IMAGE:${{ steps.tag.outputs.sha }}
          docker push $IMAGE:latest
