name: CI/CD Pipeline - Azure

on:
  push:


env:
  REGISTRY: ghcr.io  
  IMAGE_OWNER: ${{ github.repository_owner }}
  IMAGE_REPO: ${{ github.event.repository.name }}

jobs:
  # ============================================================
  # 1. BUILD: Compilar el proyecto Maven
  # ============================================================
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Instalar dependencias
        run: mvn dependency:resolve

      - name: Compilar proyecto
        run: mvn clean compile

  # ============================================================
  # 2. TEST: Ejecutar tests unitarios e integración
  # ============================================================
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Ejecutar tests
        run: mvn test

      - name: Generar reporte de cobertura (JaCoCo)
        run: mvn jacoco:report

      - name: Subir reportes de tests
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            target/surefire-reports/
            target/site/jacoco/

  # ============================================================
  # 3. STATIC ANALYSIS: Análisis estático de código
  # ============================================================
  static-analysis:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Ejecutar SpotBugs (análisis estático)
        run: mvn spotbugs:check

      - name: Subir reportes de análisis
        uses: actions/upload-artifact@v4
        with:
          name: analysis-reports
          path: target/spotbugsXml.xml

  # ============================================================
  # 4. BUILD DOCKER IMAGE & PUSH
  # ============================================================
  publish:
    needs: static-analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}
      - name: Determine image tag
        id: tag
        run: echo "sha=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
      - name: Build & push to GHCR
        run: |
          REPO_LOWER=$(echo "${IMAGE_REPO}" | tr '[:upper:]' '[:lower:]')
          IMAGE=ghcr.io/${IMAGE_OWNER}/$REPO_LOWER
          docker build -t $IMAGE:${{ steps.tag.outputs.sha }} -t $IMAGE:latest .
          docker push $IMAGE:${{ steps.tag.outputs.sha }}
          docker push $IMAGE:latest

  
  # ============================================================
  # 5. DEPLOY CON TERRAFORM A AZURE
  # ============================================================
  terraform-deploy:
    needs: publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Autenticar en Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Configurar variables de entorno para Terraform
        run: |
          echo "Configurando autenticación para Terraform..."

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Terraform Validate
        run: terraform -chdir=terraform validate

      - name: Obtener nombre de imagen
        id: get_image
        run: |
          REPO_LOWER=$(echo "${{ env.IMAGE_REPO }}" | tr '[:upper:]' '[:lower:]')
          IMAGE=ghcr.io/${{ env.IMAGE_OWNER }}/${REPO_LOWER}:latest
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Terraform Plan
        id: plan
        run: |
          terraform -chdir=terraform plan \
            -var="docker_image=${{ steps.get_image.outputs.image }}" \
            -var="location=eastus" \
            -var="ghcr_token=${{ secrets.GHCR_PAT }}" \
            -out=tfplan

      - name: Terraform Apply
        run: terraform -chdir=terraform apply -auto-approve tfplan

      - name: Mostrar URL del servicio
        run: |
          terraform -chdir=terraform output app_service_url
